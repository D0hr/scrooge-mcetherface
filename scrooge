#!/usr/bin/env python

import os
import re
import sys
import code
from scmf.raid import Raid
from scmf.helper import W3
from web3 import HTTPProvider
from configparser import ConfigParser
from mythril.mythril import (
    MythrilAnalyzer,
    MythrilDisassembler,
    MythrilConfig,
)
from mythril.exceptions import CriticalError


def critical(message: str) -> None:
    print(message)
    sys.exit()


config_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "config.ini")

# Parse all the config options

try:
    config = ConfigParser()
    config.optionxform = str
    config.read(config_path, "utf-8")
    settings = config["settings"]
except KeyError:
    critical("Missing or invalid configuration file. See config.ini.example.")

try:
    sender_address = W3.toChecksumAddress(config["settings"]["sender"])
    rpc = config["settings"]["rpc"]
except KeyError:
    critical("No sender address set in config.")
except ValueError as e:
    critical("Invalid sender address: " + config["settings"]["sender"])

try:
    if "gasprice" in settings:
        gas_price = int(settings["gasprice"])
    else:
        gas_price = 1000000000  # 1 Gwei

    if "symbolic_tx_count" in settings:
        tx_count = int(settings["symbolic_tx_count"])
    else:
        tx_count = 2

    if "timeout" in settings:
        timeout = int(settings["timeout"])
    else:
        timeout = 120  # 120 seconds
except ValueError as e:
    critical("Invalid configuation: {}".format(e))

try:
    target_address = W3.toChecksumAddress(sys.argv[1])
except IndexError:
    critical("Usage: scrooge <target_address>")
except ValueError as e:
    critical("Invalid target address: " + sys.argv[1])


conf = MythrilConfig()

if re.match(r"^https", rpc):
    rpchost = rpc[8:]
    rpctls = True
else:
    rpchost = rpc[7:]
    rpctls = False

conf.set_api_rpc(rpchost, rpctls)

try:
    disassembler = MythrilDisassembler(
        eth=conf.eth,
        enable_online_lookup=False
    )

    disassembler.load_from_address(target_address)

    analyzer = MythrilAnalyzer(
        strategy="bfs",
        disassembler=disassembler,
        address=target_address,
        execution_timeout=timeout,
        max_depth=32,
        loop_bound=3,
        disable_dependency_pruning=False,
        onchain_storage_access=True
    )
except CriticalError as e:
    critical(str(e))

print(
    "Scrooge McEtherface at your service.\nAnalyzing %s over %d transactions."
    % (target_address, tx_count)
)

report = analyzer.fire_lasers(
    modules=["ether_thief", "suicide"],
    transaction_count=tx_count,
)

raids = []
w3 = W3(HTTPProvider(rpc), gas_price=gas_price)

if len(report.issues) == 0:
    critical("No vulnerabilities found.")

for issue_key in report.issues:
    raids.append(Raid(sender_address, target_address, report.issues[issue_key], w3))

print("Found {} attacks:\n".format(len(raids)))


def list_raids():
    for i in range(0, len(raids)):
        print("ATTACK {}: {}\n".format(i, raids[i].pretty()))


list_raids()

code.interact(local=locals())
